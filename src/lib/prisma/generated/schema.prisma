// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/lib/prisma/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  email    String  @unique @db.VarChar(320)
  username String  @unique @db.VarChar(30)
  name     String? @db.VarChar(30)
  bio      String? @db.VarChar(300)

  joinedSubReddits SubReddit[]

  posts     Post[]
  postKarma Int    @default(0)

  comments     Comment[]
  commentKarma Int       @default(0)

  createdAt DateTime @default(now())

  @@index([username])
}

model SubReddit {
  id Int @id @default(autoincrement())

  name        String  @unique @db.VarChar(30)
  description String? @db.VarChar(300)

  members User[]
  posts   Post[]

  createdAt DateTime @default(now())

  @@index([name])
}

model Post {
  id Int @id @default(autoincrement())

  ownerID String
  owner   User   @relation(fields: [ownerID], references: [id])

  subRedditID Int
  subReddit   SubReddit? @relation(fields: [subRedditID], references: [id])

  title   String
  content String?
  edited  Boolean @default(false)

  votes Vote[]
  score Int    @default(0)

  comments Comment[]

  createdAt DateTime @default(now())

  @@index([ownerID, createdAt(sort: Desc)])
}

model Vote {
  id Int @id @default(autoincrement())

  ownerID Int

  postID Int?
  post   Post? @relation(fields: [postId], references: [id])

  commentID Int?
  comment   Comment? @relation(fields: [commentID], references: [id])

  type   VoteType
  postId Int?

  @@unique([ownerID, postID])
  @@unique([ownerID, commentID])
  @@index([ownerID])
  @@index([postID])
  @@index([commentID])
}

enum VoteType {
  UP
  DOWN
}

model Comment {
  id Int @id @default(autoincrement())

  postID Int
  post   Post @relation(fields: [postID], references: [id])

  ownerID String
  owner   User   @relation(fields: [ownerID], references: [id])

  comment String  @db.VarChar(100)
  edited  Boolean @default(false)

  votes Vote[]
  score Int    @default(0)

  createdAt DateTime @default(now())

  @@index([postID, score(sort: Desc)])
}
